# .github/workflows/ci.yml

name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write

jobs:
  filter-paths:
    name: Determine Changed Paths
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      android: ${{ steps.filter.outputs.android }}
      workflow: ${{ steps.filter.outputs.workflow }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Run Path Filter
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'apps/beekeeperBackend/**'
            android:
              - 'apps/beekeeperMobile/**'
            ci_workflow:
              - '.github/workflows/ci.yml'

  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    needs: filter-paths
    if: needs.filter-paths.outputs.backend == 'true' || needs.filter-paths.outputs.ci_workflow == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.x'

      - name: Vet, Test, and Build Backend
        run: |
          go vet ./...
          go test -v ./...
          go build -o beekeeper-backend
        working-directory: ./apps/beekeeperBackend

      # --- NEW: Backend Security Steps ---
      - name: Install govulncheck (SCA)
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck scan (SCA)
        run: govulncheck ./...
        working-directory: ./apps/beekeeperBackend

      - name: Run GoSec Security Scanner (SAST)
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out apps/beekeeperBackend/results.sarif ./apps/beekeeperBackend/...'

      - name: Upload SARIF file for GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: apps/beekeeperBackend/results.sarif
          category: 'Go Security Scan'

  android-ci:
    name: Android CI
    runs-on: ubuntu-latest
    needs: filter-paths
    if: needs.filter-paths.outputs.android == 'true' || needs.filter-paths.outputs.ci_workflow == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'jetbrains'

      - name: Setup Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew
        working-directory: ./apps/beekeeperMobile

      - name: Lint and Test Android App
        run: ./gradlew test
        working-directory: ./apps/beekeeperMobile

      # --- NEW: Android Security Steps ---
      - name: Initialize CodeQL (SAST)
        uses: github/codeql-action/init@v4
        with:
          languages: java # Specify Java as we are scanning the Kotlin/Java code
          queries: +security-and-quality

      # We must run the build AFTER initializing CodeQL
      - name: Build Android App for CodeQL Analysis
        run: ./gradlew clean build --no-daemon --stacktrace
        working-directory: ./apps/beekeeperMobile

      - name: Perform CodeQL Analysis (SAST)
        uses: github/codeql-action/analyze@v4

      # Note: For Android, SCA is best handled by Dependabot, which we'll enable next.
      # A manual Gradle dependency check can be added here but is often slow and noisy.
      # Dependabot is the industry standard.